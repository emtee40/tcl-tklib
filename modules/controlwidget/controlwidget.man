[comment {-*- tcl -*- doctools manpage}]
[manpage_begin controlwidget n 0.1]
[copyright {2010 Ron Fox <rfox@...>}]
[copyright {2010 Gerhard Reithofer <...@...>}]
[copyright {2010 Marco Maggi <...@...>}]
[copyright {2010 Arjen Markus <arjenmarkus@users.sourceforge.net>}]
[moddesc   controlwidget]
[titledesc {Collection of widgets for displaying and controlling numerical values}]
[require Tcl [opt 8.5]]
[require Tk [opt 8.5]]
[require snit [opt 2.0]]
[require controlwidget [opt 0.1]]

[description]
[para]

The controlwidget package focuses on the display and interactive control of numerical values.
It mimicks several of the meters and controls found in laboratory settings but also
daily life: volt meters, equalizers and tachometers to name a few. They can be seen as alternatives
for the [emph "scale widget"].


[para]
[emph Note:] The package has not sofar been tested extensively, and that may result in
an unexpected appearance if you use sizes that are different than the defaults. Also
not all options for the coloring of the various parts and fonts and so on have been tested, so that
may be another source of bugs.

[para]
A last note: some parts have not been included in any option, most notably the colors of
parts that require lighter and darker shades to cooperate.


[section "TYPES OF WIDGETS"]
The package distinguishes several typed of widgets:

[list_begin itemized]
[item]
Vertical meters: the value of the variable is translated into a vertical position, like with
the coloured bars you find on your stereo installation.

[item]
Angle displays: the value of the variable is related to the angle of a needle, like with tachometers.

[item]
Interactive widgets: most widgets allow you to change the value of the variable by pressing the mouse button
on the needle and shifting it up and down or left and right.

[item]
Non-interactive widgets: some widgets, like the thermometer widget, do not allow such interaction.

[item]
Logical or choice widgets: some widgets display the values as either on/off (or true/false) or as
one of a set of discrete choices.

[list_end]

All widgets have in common, however, that you can connect them to a variable and that changing the variable
changes the display. Forthermore, all widgets have the set and get methods to interact with the value that
the widget displays (whether that is stored in a global variable or not).

[para]
They also have in common that their appearance and behaviour is determined by one or more options that
you can set at creation time and often later on as well. The widgets are all based on the [emph snit]
package, so that the methods [method configure] and [method cget] are available to set and get these options.


[section COMMANDS]
Currently the package contains these widgets:

[list_begin definitions]

[call [cmd ::controlwidget::voltmeter] [arg w] [arg args]]
Create a voltmeter-like widget.

[list_begin arguments]
[arg_def widget w in]
Name of the widget to be created.

[arg_def arguments args in]
List of key-value pairs, controlling the appearance and behaviour of the widget:
[list_begin options]

[opt_def variable name]
Name of the variable to be associated with the meter
[opt_def value value]
Value for the meter (if not associated with a variable)
[opt_def min value]
The minimum value for data in the display
[opt_def max value]
The maximum value for data in the display
[opt_def labels list]
The labels to be shown along the scale. (These are simply considered texts, so no
relation with the minimum and maximum perse)
[opt_def title string]
String to be shown below the dial

[opt_def width pixels]
The width of the widget
[opt_def height pixels]
The height of the widget
[opt_def borderwidth pixels]
The width of the border surrounding the entire widget
[opt_def relief string]
The relief of the border surrounding the entire widget
[opt_def highlightthickness pixels]
The width of the border to indicate the widget has keyboard focus

[opt_def labelfont fontname]
Font of the labels to the scale
[opt_def titlefont fontname]
Font of the title below the dial

[opt_def dialcolor color]
Color of the dial holding the needle
[opt_def needlecolor color]
Color of the needle
[opt_def scalecolor color]
Color of the scale (arc and tickmarks)
[opt_def labelcolor color]
Color of the labels to the scale
[opt_def titlecolor color]
Color of the title below the dial
[list_end]

[list_end]


[call [cmd ::controlwidget::tachometer] [arg w] [arg args]]
Create a tachometer-like widget.

[list_begin arguments]
Name of the widget to be created.

[arg_def arguments args in]
List of key-value pairs, controlling the appearance and behaviour of the widget. In addition
to the ones given for the voltmeter widget:
[list_begin options]
[opt_def variable name]
Name of the variable to be associated with the meter
[opt_def value value]
Value for the meter (if not associated with a variable)
[opt_def dangerlevel value]
Level above which values are indicated with a different color
[opt_def dangercolor color]
Color for the values above the "danger level"
[opt_def dangerwidth pixels]
Width for the colored band indicating the "danger level"
[opt_def pincolor color]
Color for the needle and the pin
[list_end]

[list_end]


[call [cmd ::controlwidget::rdial] [arg w] [arg args]]
Create a rotating dial. You can drag the dial to change the value. With the shift button
depressed the value changes slowly, with the control button depressed it changes fast.

[list_begin arguments]
Name of the widget to be created.

[arg_def arguments args in]
List of key-value pairs, controlling the appearance and behaviour of the widget:
[list_begin options]

[opt_def variable name]
Name of the variable to be associated with the dial
[opt_def value value]
Value for the dial (if not associated with a variable)
[opt_def orient string]
Whether a horizontal disk/dial is required ("horizontal") or a vertical one ("vertical")
[opt_def step value]
Initial step for incrementing or decrementing the value
[opt_def slow value]
Factor on the step size for incrementing or decrementing the value slowly
[opt_def fast value]
Factor on the step size for incrementing or decrementing the value fast
[opt_def scale value]
Scale value to be applied to the actual value
[opt_def callback command]
Command to be called when the value changes

[opt_def width pixels]
The width of the widget
[opt_def height pixels]
The height of the widget
[opt_def background color]
The background color of the widget (coloring of the disk/dial)
[opt_def foreground color]
The foreground color of the widget (the marker lines)

[list_end]

[list_end]

[list_end]


[section ACKNOWLEDGEMENTS]
The code for most of these widgets first appeared on the Wiki. In many cases, Arjen Markus merely
refactored the code a bit and "snitified" some of them. The original code was developed by the following people:
[list_begin itemized]
[item]
Vertical meter, LED display, radio matrix: Ron Fox
[item]
Rotating dials: Gerhard Reithofer
[item]
Voltmeter and tachometer: Marco Maggi
[item]
Code for moving the needle: ?
[list_end]

[keywords {numerical values} {displaying} {controlling} {scale widget}]
[manpage_end]
